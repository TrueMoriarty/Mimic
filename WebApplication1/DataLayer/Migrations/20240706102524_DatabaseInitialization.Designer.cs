// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MimicWebApi.DataLayer.EfCode;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MimicWebApi.Migrations
{
    [DbContext(typeof(MimicContext))]
    [Migration("20240706102524_DatabaseInitialization")]
    partial class DatabaseInitialization
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MimicWebApi.DataLayer.Models.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("CharacterId"));

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Money")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.HasKey("CharacterId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("RoomId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("MimicWebApi.DataLayer.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ItemId"));

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StorageId")
                        .HasColumnType("integer");

                    b.HasKey("ItemId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("StorageId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("MimicWebApi.DataLayer.Models.Properties", b =>
                {
                    b.Property<int>("PropertiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("PropertiesId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("PropertiesId");

                    b.HasIndex("ItemId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("MimicWebApi.DataLayer.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("RoomId"));

                    b.Property<int>("MasterId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("RoomId");

                    b.HasIndex("MasterId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("MimicWebApi.DataLayer.Models.RoomStorageRelation", b =>
                {
                    b.Property<int>("RoomStorageRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("RoomStorageRelationId"));

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int>("StorageId")
                        .HasColumnType("integer");

                    b.HasKey("RoomStorageRelationId");

                    b.HasIndex("RoomId");

                    b.HasIndex("StorageId");

                    b.ToTable("RoomStorageRelation");
                });

            modelBuilder.Entity("MimicWebApi.DataLayer.Models.Storage", b =>
                {
                    b.Property<int>("StorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("StorageId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("StorageId");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("MimicWebApi.DataLayer.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("UserId"));

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MimicWebApi.DataLayer.Models.Character", b =>
                {
                    b.HasOne("MimicWebApi.DataLayer.Models.User", "Creator")
                        .WithMany("Characters")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MimicWebApi.DataLayer.Models.Room", "Room")
                        .WithMany("Characters")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("MimicWebApi.DataLayer.Models.Item", b =>
                {
                    b.HasOne("MimicWebApi.DataLayer.Models.User", "Creator")
                        .WithMany("Items")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MimicWebApi.DataLayer.Models.Storage", "Storage")
                        .WithMany("Items")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("MimicWebApi.DataLayer.Models.Properties", b =>
                {
                    b.HasOne("MimicWebApi.DataLayer.Models.Item", null)
                        .WithMany("Properties")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MimicWebApi.DataLayer.Models.Room", b =>
                {
                    b.HasOne("MimicWebApi.DataLayer.Models.User", "Master")
                        .WithMany("Rooms")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("MimicWebApi.DataLayer.Models.RoomStorageRelation", b =>
                {
                    b.HasOne("MimicWebApi.DataLayer.Models.Room", "Room")
                        .WithMany("RoomStorageRelations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MimicWebApi.DataLayer.Models.Storage", "Storage")
                        .WithMany("RoomStorageRelations")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("MimicWebApi.DataLayer.Models.Item", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("MimicWebApi.DataLayer.Models.Room", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("RoomStorageRelations");
                });

            modelBuilder.Entity("MimicWebApi.DataLayer.Models.Storage", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("RoomStorageRelations");
                });

            modelBuilder.Entity("MimicWebApi.DataLayer.Models.User", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Items");

                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
